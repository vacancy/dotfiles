if version > 740
    set termguicolors
endif

set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum

filetype on  " 开启文件类型侦测
filetype indent on
filetype plugin on  " 根据侦测到的不同类型加载对应的插件

" 让配置变更立即生效
" autocmd BufWritePost $MYVIMRC source $MYVIMRC

set viminfo+=n~/.vim/viminfo

set nocompatible          " 关闭兼容模式
set number                " 开启行号显示
set nowrap                " 禁止折行
set laststatus=2          " 总是显示状态栏
set ruler                 " 显示光标当前位置
set hlsearch              " 高亮显示搜索结果
set incsearch             " 开启实时搜索功能
set ignorecase            " 搜索时大小写不敏感
set wildmenu              " vim 自身命令行模式智能补全

set expandtab             " 将制表符扩展为空格
set tabstop=4             " 设置编辑时制表符占用空格数
set shiftwidth=4          " 设置格式化时制表符占用空格数
set softtabstop=4         " 让 vim 把连续数量的空格视为一个制表符

set backspace=2
set whichwrap+=<,>,h,l

syntax enable    " 开启语法高亮功能
syntax on        " 允许用指定语法高亮配色方案替换默认方案

set foldmethod=indent     " 基于缩进或语法进行代码折叠
set nofoldenable          " 启动 vim 时关闭折叠代码
" augroup OpenAllFoldsOnFileOpen
"     autocmd!
"     autocmd BufRead * normal zR
" augroup END

set gcr=a:block-blinkon0  " 禁止光标闪烁
set guioptions-=l         " 禁止显示滚动条
set guioptions-=L
set guioptions-=r
set guioptions-=R
set guioptions-=m         " 禁止显示菜单和工具条
set guioptions-=T
set guifont=YaHei\ Consolas\ Hybrid\ 10.5

" 定义鼠标模式
set mouse=a
set selection=exclusive
set selectmode=mouse,key

" enable the spell check
set spell spelllang=en_us

" 定义快捷键的前缀，即 <leader>
let mapleader=";"

" Slient the warnings on start for YCM.
" if has('python3')
"   silent! python3 1
" endif

" >>>>
" 插件安装

" vundle 环境设置
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
" vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Color schemes
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'vim-scripts/phd'
Plugin 'iCyMind/NeoSolarized'

" Display
Plugin 'Lokaltog/vim-powerline'
" Indentation guide
Plugin 'nathanaelkane/vim-indent-guides'

" File system
Plugin 'scrooloose/nerdtree'  " File list
Plugin 'fholgado/minibufexpl.vim'
Plugin 'derekwyatt/vim-fswitch'  " Switcher between .h and .cpp
Plugin 'derekwyatt/vim-protodef'  " Converting .h to .cpp
Plugin 'airblade/vim-gitgutter'

" Coding helpers. Highlight, auto-completion, comment, navigation.
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'majutsushi/tagbar'  " Tag list
Plugin 'Valloric/YouCompleteMe'
Plugin 'aperezdc/vim-template'  " File templates
Plugin 'sirver/ultisnips'
Plugin 'honza/vim-snippets' " Snippets collection
Plugin 'scrooloose/nerdcommenter'  " Comment
Plugin 'rizzatti/dash.vim'

" Search and editing
Plugin 'Lokaltog/vim-easymotion'  " Quick cursor jumping
Plugin 'terryma/vim-multiple-cursors'  " Multiple cursor
Plugin 'dyng/ctrlsf.vim'
Plugin 'kshenoy/vim-signature'
Plugin 'vim-scripts/BOOKMARKS--Mark-and-Highlight-Full-Lines'

" Terminal
" Plugin 'ervandew/screen'

Plugin 'vim-scripts/DfrankUtil'
" Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-scripts/vimprj'
Plugin 'vim-scripts/DrawIt'

" 插件列表结束
call vundle#end()
filetype plugin indent on

" Remove the trailing spaces before saving.
autocmd BufWritePre * %s/\s\+$//e

" MiniBufExplorer
autocmd vimenter * :MBEToggle
" NERDTree
autocmd vimenter * NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

autocmd VimEnter * nested :TagbarOpen
" wincmd l
autocmd VimEnter * wincmd l
autocmd VimEnter * wincmd j

" 配色方案
" Change the color for comments.

colorscheme molokai
set background=dark
hi Comment ctermfg=246 guifg=#999999
hi VisualNOS ctermbg=240
hi Visual ctermbg=238
hi Underlined ctermfg=246 cterm=underline
hi StatusLine   ctermfg=246 ctermbg=253
hi StatusLineNC ctermfg=246 ctermbg=232

" colorscheme NeoSolarized
" set background=light
" let g:neosolarized_contrast = "high"
" let g:neosolarized_visibility = "high"
" let g:gitgutter_override_sign_column_highlight = 0

" 高亮显示当前行/列
set cursorline
set cursorcolumn
set colorcolumn=120

" hi Normal guibg=NONE ctermbg=NONE
" hi ColorColumn  term=reverse ctermbg=1 guibg=LightRed
" hi CursorLine   cterm=NONE ctermbg=1 guibg=LightRed
" hi CursorColumn cterm=NONE ctermbg=1 guibg=LightRed

" hi Comment ctermfg=246 guifg=#999999
" hi VisualNOS ctermbg=240
" hi Visual ctermbg=238
" hi Underlined ctermfg=246 cterm=underline
" hi StatusLine   ctermfg=246 ctermbg=253
" hi StatusLineNC ctermfg=246 ctermbg=232

:nnoremap <space> zA

" 定义快捷键到行首和行尾
nmap LB 0
nmap LE $
" 定义快捷键在结对符之间跳转
nmap <leader>M %

vnoremap <leader>y "+y          " 设置快捷键将选中文本块复制至系统剪贴板
nmap <leader>p "+p              " 设置快捷键将系统剪贴板内容粘贴至vim

" 保存快捷键
" map <leader>ss :mksession! my.vim<cr> :wviminfo! my.viminfo<cr>
map <leader>ss :mksession! my.vim<cr>
" 恢复快捷键
" map <leader>rs :source my.vim<cr> :rviminfo my.viminfo<cr>
map <leader>rs :source my.vim<cr>

inoremap <C-l> <RIGHT>
inoremap <C-k> <UP>
inoremap <C-j> <DOWN>
inoremap <C-h> <LEFT>

" FSwitch
nmap <silent> <leader>sw :FSHere<cr>
nnoremap <leader>tig <Plug>IndentGuidesToggle
nnoremap <leader>tfl :NERDTreeToggle<CR>
nnoremap <leader>tbl :MBEToggle<cr>
nnoremap <leader>ttl :TagbarToggle<CR>

map <C-l> :MBEbf<cr>
map <C-h> :MBEbb<cr>

nnoremap <C-g> :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>d :YcmCompleter GetDoc<CR>
inoremap <leader>; <C-x><C-o>                                        " YCM 集成 OmniCppComplete 补全引擎，设置其快捷键

" wildfire
" map <SPACE> <Plug>(wildfire-fuel)
" vmap <S-SPACE> <Plug>(wildfire-water)
" let g:wildfire_objects = ["i'", 'i"', "i)", "i]", "i}", "i>", "ip"]  " 适用于哪些结对符

map  <leader>s <Plug>(easymotion-bd-f)            " <leader>c{char} to move to {char}
nmap <leader>s <Plug>(easymotion-overwin-f)

map  f <Plug>(easymotion-bd-w)
nmap f <Plug>(easymotion-overwin-w)
nmap s <Plug>(easymotion-overwin-f2)
" map  L <Plug>(easymotion-bd-jk)
" nmap L <Plug>(easymotion-overwin-line)
"
" 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：global search
nnoremap <leader>gs :CtrlSF<CR>

" 正向遍历同名标签
nmap <leader>tn :tnext<CR>
" 反向遍历同名标签
nmap <leader>tp :tprevious<CR>

" 定义:Man命令查看各类man信息的快捷键
nmap <leader>man :Man 3 <cword><CR>

" 调用 gundo 树
nnoremap <leader>ud :GundoToggle<CR>

" Powerline
let g:Powerline_colorscheme='solarized256'

" Indent Guides
let g:indent_guides_enable_on_vim_startup=1 " 随 vim 自启动
let g:indent_guides_start_level=2           " 从第二层开始可视化显示缩进
let g:indent_guides_guide_size=1            " 色块宽度

" Protodef
let g:disable_protodef_sorting=1  " 成员函数的实现顺序与声明顺序一致

" 自定义 vim-signature 快捷键
let g:SignatureMap = {
    \ 'leader'             :  "m",
    \ 'PlaceNextMark'      :  "m,",
    \ 'ToggleMarkAtLine'   :  "m.",
    \ 'PurgeMarksAtLine'   :  "m-",
    \ 'DeleteMark'         :  "dm",
    \ 'PurgeMarks'         :  "mda",
    \ 'PurgeMarkers'       :  "m<BS>",
    \ 'GotoNextLineAlpha'  :  "']",
    \ 'GotoPrevLineAlpha'  :  "'[",
    \ 'GotoNextSpotAlpha'  :  "`]",
    \ 'GotoPrevSpotAlpha'  :  "`[",
    \ 'GotoNextLineByPos'  :  "]'",
    \ 'GotoPrevLineByPos'  :  "['",
    \ 'GotoNextSpotByPos'  :  "mn",
    \ 'GotoPrevSpotByPos'  :  "mp",
    \ 'GotoNextMarker'     :  "[+",
    \ 'GotoPrevMarker'     :  "[-",
    \ 'GotoNextMarkerAny'  :  "]=",
    \ 'GotoPrevMarkerAny'  :  "[=",
    \ 'ListLocalMarks'     :  "ms",
    \ 'ListLocalMarkers'   :  "m?"
\ }

let NERDTreeWinSize=32             " 设置 NERDTree 子窗口宽度
let NERDTreeWinPos="left"          " 设置 NERDTree 子窗口位置
let NERDTreeShowHidden=1           " 显示隐藏文件
let NERDTreeMinimalUI=1            " NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeAutoDeleteBuffer=1     " 删除文件时自动删除文件对应 buffer
let NERDTreeHighlightCursorline=1  " 高亮显示光标所在的文件
let NERDTreeChDirMode = 2          " 当前目录的设定

let g:tagbar_autofocus=1
let g:tagbar_vertical = 25 " 显示在Nerdtree下方
let g:tagbar_width=32      " 设置标签子窗口的宽度
let g:tagbar_compact=1     " tagbar 子窗口中不显示冗余帮助信息
" 设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_cpp = {
    \ 'ctagstype' : 'c++',
    \ 'kinds'     : [
        \ 'c:classes:0:1',
        \ 'd:macros:0:1',
        \ 'e:enumerators:0:0',
        \ 'f:functions:0:1',
        \ 'g:enumeration:0:1',
        \ 'l:local:0:1',
        \ 'm:members:0:1',
        \ 'n:namespaces:0:1',
        \ 'p:functions_prototypes:0:1',
        \ 's:structs:0:1',
        \ 't:typedefs:0:1',
        \ 'u:unions:0:1',
        \ 'v:global:0:1',
        \ 'x:external:0:1'
    \ ],
    \ 'sro'        : '::',
    \ 'kind2scope' : {
        \ 'g' : 'enum',
        \ 'n' : 'namespace',
        \ 'c' : 'class',
        \ 's' : 'struct',
        \ 'u' : 'union'
    \ },
    \ 'scope2kind' : {
        \ 'enum'      : 'g',
        \ 'namespace' : 'n',
        \ 'class'     : 'c',
        \ 'struct'    : 's',
        \ 'union'     : 'u'
    \ }
\ }
let g:tagbar_autoshowtag = 1  " 当编辑代码时，在Tagbar自动追踪变量
let g:tagbar_sort=0           " 不按照字母顺序排序
let g:tagbar_foldlevel=99     " 默认展开

" YCM
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:ycm_complete_in_comments=1                                     " 补全功能在注释中同样有效
let g:ycm_confirm_extra_conf=1                                       " 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_collect_identifiers_from_tags_files=0                      " 开启 YCM 标签补全引擎
let g:ycm_min_num_of_chars_for_completion=1                          " 从第一个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=1                                           " 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1                             " 语法关键字补全
let g:ycm_autoclose_preview_window_after_completion=1
" set completeopt-=preview                                           " 补全内容不以分割子窗口形式出现，只显示补全列表

let g:UltiSnipsExpandTrigger="<c-f>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

let g:ultisnips_python_style="google"
let g:ultisnips_python_quoting_style="single"
let g:ultisnips_python_triple_quoting_style="double"

" NERD commenter
let g:NERDSpaceDelims = 1

" 设置插件 indexer 调用 ctags 的参数
" 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+l+p+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
" let g:indexer_ctagsCommandLineOptions="--c++-kinds=+l+p+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"

let g:ctrlsf_default_view_mode = 'compact'
let g:ctrlsf_position = 'bottom'

" 快捷替换
let g:multi_cursor_start_word_key='<C-d>'
let g:multi_cursor_next_key='<C-d>'
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" 启用:Man命令查看各类man信息
source $VIMRUNTIME/ftplugin/man.vim

" Disable the undo history
" set undodir=~/.vim/undo_history/  " 保存 undo 历史。必须先行创建 .undo_history/
" set undofile
" 设置环境保存项
set sessionoptions="blank,globals,localoptions,tabpages,sesdir,folds,help,options,resize,winpos,winsize"

" Templates
let g:templates_directory='$HOME/.vim/templates'
let g:username='Jiayuan Mao'
let g:email='maojiayuan@gmail.com'

" Snippets
let g:snips_author="Jiayuan Mao"
let g:snips_email="maojiayuan@gmail.com"
let g:snips_github="https://github.com/vacancy"

" nmap <leader>q :q<CR>           " 定义快捷键关闭当前分割窗口
" nmap <leader>w :w<CR>           " 定义快捷键保存当前窗口内容
" nmap <leader>WQ :wa<CR>:q<CR>   " 定义快捷键保存所有窗口内容并退出 vim
" nmap <leader>Q :qa!<CR>         " 不做任何保存，直接退出 vim

" 设置快捷键遍历子窗口
" nnoremap nw <C-W><C-W>      " 依次遍历
" nnoremap <leader>lw <C-W>l  " 跳转至右方的窗口
" nnoremap <leader>hw <C-W>h  " 跳转至左方的窗口
" nnoremap <leader>kw <C-W>k  " 跳转至上方的子窗口
" nnoremap <leader>jw <C-W>j  " 跳转至下方的子窗口

" 精准替换
" 替换函数。参数说明：
" confirm：是否替换前逐一确认
" wholeword：是否整词匹配
" replace：被替换字符串
function! Replace(confirm, wholeword, replace)
    wa
    let flag = ''
    if a:confirm
        let flag .= 'gec'
    else
        let flag .= 'ge'
    endif
    let search = ''
    if a:wholeword
        let search .= '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
    else
        let search .= expand('<cword>')
    endif
    let replace = escape(a:replace, '/\&~')
    execute 'argdo %s/' . search . '/' . replace . '/' . flag . '| update'
endfunction

" 不确认、非整词
nnoremap <leader>R :call Replace(0, 0, input('Replace '.expand('<cword>').' with: '))<CR>
" 不确认、整词
nnoremap <leader>rw :call Replace(0, 1, input('Replace '.expand('<cword>').' with: '))<CR>
" 确认、非整词
nnoremap <leader>rc :call Replace(1, 0, input('Replace '.expand('<cword>').' with: '))<CR>
" 确认、整词
nnoremap <leader>rcw :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>
nnoremap <leader>rwc :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>

